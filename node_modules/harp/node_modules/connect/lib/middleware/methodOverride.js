<<<<<<< HEAD

=======
>>>>>>> dev
/*!
 * Connect - methodOverride
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var methods = require('methods');
=======
var deprecate = require('depd')('connect');
var methodOverride = require('method-override');
>>>>>>> dev

/**
 * Method Override:
 *
<<<<<<< HEAD
 * Provides faux HTTP method support.
 *
 * Pass an optional `key` to use when checking for
 * a method override, othewise defaults to _\_method_.
 * The original method is available via `req.originalMethod`.
=======
 * See [method-override](https://github.com/expressjs/method-override)
>>>>>>> dev
 *
 * @param {String} key
 * @return {Function}
 * @api public
 */

<<<<<<< HEAD
module.exports = function methodOverride(key){
  key = key || "_method";
  return function methodOverride(req, res, next) {
    var method;
    req.originalMethod = req.originalMethod || req.method;

    // req.body
    if (req.body && key in req.body) {
      method = req.body[key].toLowerCase();
      delete req.body[key];
    }

    // check X-HTTP-Method-Override
    if (req.headers['x-http-method-override']) {
      method = req.headers['x-http-method-override'].toLowerCase();
    }

    // replace
    if (supports(method)) req.method = method.toUpperCase();

    next();
  };
};

/**
 * Check if node supports `method`.
 */

function supports(method) {
  return ~methods.indexOf(method);
}
=======
module.exports = function(key){
  // this is a shim to keep the interface working with method-override@2
  var opts = { methods: null };
  var prop = key || '_method';
  var _headerOverride = methodOverride('X-HTTP-Method-Override', opts);
  var _bodyOverride = methodOverride(function(req){
    if (req.body && typeof req.body === 'object' && prop in req.body) {
      var method = req.body[prop];
      delete req.body[prop];
      return method;
    }
  }, opts);

  return function(req, res, next){
    _bodyOverride(req, res, function(err){
      if (err) return next(err);
      _headerOverride(req, res, next);
    });
  };
};

module.exports = deprecate.function(module.exports,
  'methodOverride: use method-override npm module instead');
>>>>>>> dev
